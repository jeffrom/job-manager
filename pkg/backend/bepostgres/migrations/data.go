// Code generated by go-bindata.
// sources:
// pkg/backend/bepostgres/migrations/0001_create.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_createUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xcb\x6e\xdb\x3a\x10\x86\xf7\x7e\x8a\xd9\xd9\x06\xb2\x38\x38\x45\xbb\xc9\xca\x4d\x59\x20\x68\xe3\xa6\x4e\x02\x34\x2b\x61\x24\x8d\x6c\xda\x14\xe9\x90\x23\x37\x7e\xfb\x42\xa2\xa4\xe8\x62\xf9\x82\x20\x3b\x6b\x2e\xe6\xfc\x9f\xfe\xa1\x6e\x16\x62\xf6\x28\xe0\x71\xf6\xf5\xa7\x80\x97\x8c\x32\x72\x30\x19\x01\x00\xc8\x18\x42\xb9\x74\x64\x25\x2a\xb8\x5f\xdc\xde\xcd\x16\xcf\xf0\x43\x3c\x5f\x15\x59\x8d\x29\xc1\x0e\x6d\xb4\x42\x3b\xf9\xff\xf3\xa7\x29\x68\xc3\xa0\x33\xa5\x7c\x7e\x07\x52\x33\x2d\xc9\x76\xe2\x96\xd8\x4a\x72\xe0\x52\x54\x4a\x6a\xee\xa4\x33\x2d\x5f\x32\x0a\xd0\x2e\x1d\x84\xc6\x28\x42\xdd\xa9\x88\x33\x8b\x2c\x8d\xce\x87\xeb\xf7\x47\x2b\x8a\x36\x52\x07\x27\xaa\x14\xca\xf4\x44\xcd\xda\x84\x81\x8b\x56\x94\x22\xac\x9d\xd1\xa1\x8f\x86\x18\x6d\x4c\x92\x04\x52\x4b\x96\xa8\x06\xff\x03\x62\x4a\x30\x53\x0c\xff\xb5\xfb\x52\x7c\xbd\xb8\x27\xc1\x88\x8d\x85\x44\x19\x1c\x2e\x8e\x2c\x21\x53\x1c\x20\x03\xcb\x94\x1c\x63\xba\xed\x17\x6b\xf3\x77\x32\x2d\x49\x6f\xe3\xcb\x1a\x62\x52\xd4\x6d\xf0\x99\xa7\xf9\xed\xef\x27\x01\x93\xdc\x13\x57\xb0\x9b\x8e\xa6\xd7\xa3\x51\xdf\x58\x81\xc2\x90\x54\x65\xaf\x22\x74\xcc\x41\x2d\x87\x7d\xe9\x1b\x0c\x55\x76\x2c\xdf\x70\x2c\x4c\x8a\xc3\xae\xa0\x1c\x30\xef\x6c\x0f\xf9\x7c\x2f\xfc\x0b\x67\xe4\xcc\xc1\xec\x01\xc4\xfc\xe9\xae\x9c\x74\x5c\x74\xc7\x63\xff\xbf\x63\x9b\x69\x2d\xf5\xb2\x7a\x8c\x4c\xba\xcd\xc1\x54\xcf\x09\x4a\xf5\x56\x1c\x13\xd6\xbf\x23\xd4\x11\xa9\x46\x52\xea\x1d\x2a\x19\x8f\xfb\xbc\xd6\x26\x3c\x6f\x0d\x87\xd6\xcc\x03\xf7\xbd\x2d\x8f\x2d\xc4\x77\xb1\x10\xf3\x1b\xf1\x50\x6f\xbb\x8c\xcb\x37\x8c\xcc\x94\x6e\xb9\xde\x4d\x1f\x2d\x99\x34\xf0\xb4\x8f\x2a\x76\xb5\xb1\x22\x31\x72\xbd\x32\x45\x80\xb4\x07\x78\xbe\xd5\x1c\xa3\x3d\x6c\xb5\x8a\x76\x3b\xd7\x04\x78\x3b\xff\x26\xfe\x14\x00\xab\x71\x7f\xcd\x4b\x9e\xfe\xf9\x10\xec\xa0\xb8\x11\xce\x43\x9e\x97\x1f\x07\xeb\x4f\xab\xb1\xbe\xd3\xc8\xd5\x76\xf9\x73\x87\x4d\x5c\x0b\x2f\xc5\x04\xe5\xa0\x5e\x7e\xad\xd0\x47\x0f\x43\xf0\x97\xe7\x07\x61\x68\xfa\xe2\xc2\x1b\x6b\x40\x66\x39\x6e\x57\x68\xad\xe2\x88\x54\x4b\x2e\x53\xfc\x41\x4a\x4f\x6d\x4c\x97\x04\x59\x6b\x2c\x30\xbd\xf2\xb0\xfd\xbb\x5f\xb0\x83\x7b\x50\x17\x1d\x06\x56\x8a\xee\xf0\xaa\x51\x1c\xc1\xe5\x3f\xcb\x9a\x5c\x45\xec\x62\x26\x1b\xda\x43\xb8\x67\xc2\x3e\xdf\x77\x1b\xe1\x6d\xba\x20\x3f\xa6\xd4\xd5\x9c\x79\x43\xfb\xe9\xf5\xe8\x5f\x00\x00\x00\xff\xff\x32\x84\xf5\xd0\xec\x08\x00\x00")

func _0001_createUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_createUpSql,
		"0001_create.up.sql",
	)
}

func _0001_createUpSql() (*asset, error) {
	bytes, err := _0001_createUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_create.up.sql", size: 2284, mode: os.FileMode(436), modTime: time.Unix(1612763823, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_create.up.sql": _0001_createUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_create.up.sql": &bintree{_0001_createUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

