// Code generated by go-bindata.
// sources:
// pkg/backend/bepostgres/migrations/0001_create.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_createUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x4d\x6f\xdb\x30\x0c\x86\xef\xfe\x15\xbc\x25\x01\x7a\x18\x36\x6c\x97\x9e\xb2\x4e\x03\x8a\xad\x6e\x97\xb6\xc0\x7a\x32\x68\x9b\x4e\x95\xc8\x52\x2a\xc9\x59\xf3\xef\x07\x5b\xb2\xeb\x8f\x38\x1f\x28\x7a\x8b\x44\x32\xe4\xfb\xf8\xa5\x7d\xb5\x60\xf3\x07\x06\x0f\xf3\xef\xbf\x19\xbc\x14\x54\x90\x81\x69\x00\x00\xc0\x53\x88\xf9\xd2\x90\xe6\x28\xe0\x6e\x71\x7d\x33\x5f\x3c\xc1\x2f\xf6\x74\x51\x45\x25\xe6\x04\x5b\xd4\xc9\x33\xea\xe9\xe7\xaf\x5f\x66\x20\x95\x05\x59\x08\xe1\xe2\x5b\xe0\xd2\xd2\x92\x74\xef\x5e\x93\xd5\x9c\x0c\x98\x1c\x85\xe0\xd2\xf6\xc2\x85\xe4\x2f\x05\x45\xa8\x97\x06\x62\xa5\x04\xa1\xec\x65\xa4\x85\x46\xcb\x95\x2c\x87\x1b\xd6\x27\xcf\x94\xac\xb9\x8c\x8e\x64\x09\xe4\xf9\x91\x9c\x95\x8a\x23\x93\x3c\x53\x8e\xb0\x32\x4a\xc6\xee\x36\xc6\x64\xad\xb2\x2c\xe2\x92\x5b\x8e\x62\xf4\x3f\x20\xa5\x0c\x0b\x61\xe1\x53\xb7\x2e\xc7\xd7\xb3\x6b\x32\x4c\xac\xd2\x90\x09\x85\xe3\xc9\x89\x26\xb4\x94\x46\x68\xc1\xf2\x9c\x8c\xc5\x7c\x33\x4c\x96\xea\xdf\x74\xe6\x49\x6f\xd2\xf3\x0a\x52\x12\xd4\x2f\x70\x91\xc7\xf0\xfa\xcf\x23\x83\x69\xe9\x89\x0b\xd8\xce\x82\xd9\x65\x10\x78\x63\x5d\x87\x3f\xd8\x5f\x6f\xac\xa8\x32\xcd\x6d\xd8\xf8\xac\x3c\xb7\x72\x5b\x26\x8c\x04\xc6\x24\x6a\x2b\x56\x57\x87\xdc\xd6\x71\xe3\xb7\xa1\x19\x51\x14\x87\xe2\x2d\x77\xc3\xb4\x6a\x76\x01\x5e\x4c\x59\xd9\x11\xf4\xf0\x74\xc7\x9c\x39\x2c\xda\xc2\xc0\xfc\x1e\x58\xf8\x78\xe3\x27\x9d\x54\xd5\xe9\xc4\xfd\xef\x44\x17\x52\x72\xb9\xac\x8f\x89\xca\x37\x25\xc4\xfa\x9c\x21\x17\x6f\xc9\x29\x61\xf3\x3b\x41\x99\x90\x68\x05\xb9\xdc\xa2\xe0\xe9\x24\x18\xf0\x5a\xa9\xf8\xb4\x95\x1d\x5b\x49\x07\xdc\xd5\x76\xfc\xb8\x60\x3f\xd9\x82\x85\x57\xec\xbe\x79\x62\x3c\xf5\x6e\x40\x6b\x29\xdf\xd8\x66\x8f\xdd\xad\x67\xd2\xc2\xd3\x6d\x55\xed\x75\x6b\x9d\x52\xb4\xcd\x7a\x55\x17\x24\x1d\xc0\xd3\x6d\x69\x2c\xea\xfd\xb6\xac\x69\x77\x63\x43\x73\x96\x00\xeb\x71\x6f\x43\xcf\xd3\x9d\xf7\xc1\x8e\xaa\xb7\xc7\x69\xc8\xcb\xf4\xc3\x60\x5d\xb7\x06\xeb\x3b\x8d\x5c\x6f\xa2\xeb\x3b\x6e\xe2\x46\xb8\x17\x13\xf9\x41\x9d\xfc\x46\xa1\xbb\xdd\x0f\xc1\xbd\x68\x3f\x08\x43\xdb\x17\x67\xbe\xdd\x46\x64\xfa\x71\xfb\x42\x1b\x15\x07\xa4\x6a\x32\x85\xb0\x1f\xa4\xf4\xd8\xc6\xf4\x49\x90\xd6\x4a\x83\xa5\x57\x3b\x6e\xff\xfe\xd7\x6e\xef\x1e\x34\x49\xfb\x81\x79\xd1\x3d\x5e\x0d\x8a\x03\xb8\xdc\x27\x5c\x92\xa9\x89\xad\x69\x07\xf1\xce\x12\x0e\x71\xbd\xfb\xb9\xbe\x35\x8b\xca\x36\x7e\xcc\xf6\x08\x6b\xda\xcd\x2e\x83\xff\x01\x00\x00\xff\xff\x23\x26\xc0\x66\xe7\x08\x00\x00")

func _0001_createUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_createUpSql,
		"0001_create.up.sql",
	)
}

func _0001_createUpSql() (*asset, error) {
	bytes, err := _0001_createUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_create.up.sql", size: 2279, mode: os.FileMode(436), modTime: time.Unix(1613443689, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_create.up.sql": _0001_createUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_create.up.sql": &bintree{_0001_createUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

