// Code generated by go-bindata.
// sources:
// pkg/backend/bepostgres/migrations/0001_create.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_createUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xcb\x6e\xdb\x3a\x10\x86\xf7\x7e\x8a\xd9\xd9\x0e\x02\xe4\xe0\x14\xed\x26\x2b\x37\x65\x81\xa0\x8d\x9b\x3a\x09\xd0\xac\x84\x91\x34\xb2\x69\x53\xa4\x43\x8e\xdc\xe4\xed\x0b\x8b\x94\x6a\x49\x96\x2f\x28\xb2\xb3\xe6\x62\xce\x7c\xfa\x7f\xea\x66\x26\x26\x8f\x02\x1e\x27\x9f\xbf\x0b\x78\x29\xa8\x20\x07\xa3\x01\x00\x80\x4c\x21\x96\x73\x47\x56\xa2\x82\xfb\xd9\xed\xdd\x64\xf6\x0c\xdf\xc4\xf3\x65\x99\xd5\x98\x13\x6c\xd0\x26\x0b\xb4\xa3\xff\x3f\x7e\x18\x83\x36\x0c\xba\x50\xca\xe7\x37\x20\x35\xd3\x9c\x6c\x2b\x6e\x89\xad\x24\x07\x2e\x47\xa5\xa4\xe6\x56\xba\xd0\xf2\xa5\xa0\x08\xed\xdc\x41\x6c\x8c\x22\xd4\xad\x8a\xb4\xb0\xc8\xd2\xe8\xed\x70\xdd\xfe\x64\x41\xc9\x4a\xea\xe8\x48\x95\x42\x99\x1f\xa9\x59\x9a\x38\x72\xc9\x82\x72\x84\xa5\x33\x3a\xf6\xd1\x18\x93\x95\xc9\xb2\x48\x6a\xc9\x12\x55\xef\x7f\x40\x4a\x19\x16\x8a\xe1\xbf\x66\x5f\x8e\xaf\x67\xf7\x64\x98\xb0\xb1\x90\x29\x83\xfd\xc5\x89\x25\x64\x4a\x23\x64\x60\x99\x93\x63\xcc\xd7\xdd\x62\x6d\x7e\x8f\xc6\x81\xf4\x3a\x3d\xaf\x21\x25\x45\xed\x06\x9f\x79\x9a\xde\xfe\x7c\x12\x30\xda\x6a\xe2\x12\x36\xe3\xc1\xf8\x7a\x30\xe8\x0a\x2b\x52\x18\x93\xaa\xe4\x55\x86\x0e\x29\xa8\xa1\xb0\x4f\x5d\x81\xa1\x2a\x0e\xe5\x77\x14\x0b\xa3\xf2\xb0\x4b\x08\x03\x6e\x3b\x9b\x43\x3e\xdf\x0b\xff\xc2\x19\xb9\x70\x30\x79\x00\x31\x7d\xba\x0b\x93\x0e\xcb\xee\x74\xe8\xff\x77\x68\x0b\xad\xa5\x9e\x57\x8f\x89\xc9\xd7\x5b\x30\xd5\x73\x86\x52\xfd\x2d\x4e\x09\xeb\xdf\x09\xea\x84\xd4\x4e\x52\xea\x0d\x2a\x99\x0e\xbb\xbc\x96\x26\x3e\xcd\x86\x7d\x36\xf3\xc0\x7d\x6f\x43\x63\x33\xf1\x55\xcc\xc4\xf4\x46\x3c\xd4\x6e\x97\x69\x78\xc3\xc8\x4c\xf9\x9a\x6b\x6f\xfa\x68\x60\xb2\x83\xa7\x79\x54\xe9\xd5\x1d\x8b\xa4\xc8\xb5\x65\xca\x00\x69\x0f\xf0\x74\xa9\x39\x46\xbb\x5f\x6a\x15\xed\x66\xae\x04\x78\x75\x01\x81\xe1\xed\xf4\x8b\xf8\x55\x32\xac\x26\xfe\x31\x0d\x48\xfd\xf3\xf8\x1a\x2e\xae\xba\xc8\xa3\xf2\x5e\x38\x0d\xfc\xb6\xfc\x30\x5e\x7f\x60\x0d\xf7\x1f\xe5\x5c\x79\xcc\x9f\xdb\x2f\xe5\x7a\xf7\xb0\x4c\x14\x06\xf5\x04\xea\x0d\x7d\x74\x9f\xee\xa2\x70\x85\xbe\x13\x86\x5d\x75\x9c\x79\x6f\xf5\xac\x19\xc6\x6d\x2f\x5a\x6f\x71\x60\x55\x4b\xae\x50\xfc\x4e\x9b\x1e\xf3\x4d\x9b\x04\x59\x6b\x2c\x30\xbd\x72\xbf\x09\xda\xdf\xb1\xbd\x6e\xa8\x8b\xf6\x03\x0b\x4b\xb7\x78\xd5\x28\x0e\xe0\xf2\x1f\x67\x4d\xae\x22\xb6\xa2\x37\x88\xdf\x98\xb0\x8b\xeb\xcc\xf7\xfa\x27\x00\x00\xff\xff\x66\x93\x79\x1d\x87\x08\x00\x00")

func _0001_createUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_createUpSql,
		"0001_create.up.sql",
	)
}

func _0001_createUpSql() (*asset, error) {
	bytes, err := _0001_createUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_create.up.sql", size: 2183, mode: os.FileMode(436), modTime: time.Unix(1612170277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_create.up.sql": _0001_createUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_create.up.sql": &bintree{_0001_createUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

